!function(e){var t={};function r(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(o,a,function(t){return e[t]}.bind(null,a));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){r(1),r(2),r(3),r(4),e.exports=r(5)},function(e,t){void 0!==AppDependencies&&AppDependencies.push("virtoCommerce.assets"),angular.module("virtoCommerce.assets",[]).config(["$stateProvider",function(e){e.state("workspace.assets",{url:"/assets",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"assetList",controller:"platformWebApp.assets.assetListController",template:"Modules/$(virtoCommerce.Assets)/Scripts/blades/asset-list.tpl.html",isClosingDisabled:!0})}]})}]).run(["platformWebApp.mainMenuService","$state",function(e,t){var r={path:"browse/assets",icon:"fa fa-folder-o",title:"platform.menu.assets",priority:130,action:function(){t.go("workspace.assets")},permission:"platform:asset:access"};e.addMenuItem(r)}])},function(e,t){angular.module("platformWebApp").controller("platformWebApp.assets.assetListController",["$scope","$translate","platformWebApp.assets.api","platformWebApp.bladeNavigationService","platformWebApp.dialogService","$sessionStorage","platformWebApp.bladeUtils","platformWebApp.uiGridHelper",function(e,t,r,o,a,n,l,i){var s=e.blade;function p(e,t){return{id:e,name:t,blade:s,navigate:function(e){o.closeBlade(s,(function(){s.disableOpenAnimation=!0,o.showBlade(s,s.parentBlade)}))}}}function c(e){o.closeChildrenBlades(s,(function(){var t={id:"confirmDeleteItem",title:"platform.dialogs.folders-delete.title",message:"platform.dialogs.folders-delete.message",callback:function(t){if(t){var a=_.pluck(e,"url");r.remove({urls:a},s.refresh,(function(e){o.setError("Error "+e.status,s)}))}}};a.showConfirmationDialog(t)}))}s.title="platform.blades.asset-list.title",s.currentEntity||(s.currentEntity={}),s.refresh=function(){s.isLoading=!0,r.search({keyword:s.searchKeyword,folderUrl:s.currentEntity.url},(function(t){e.pageSettings.totalItems=t.totalCount,_.each(t.results,(function(e){e.isImage=e.contentType&&e.contentType.startsWith("image/"),e.isImage&&(e.noCacheUrl=e.url+"?t="+e.modifiedDate)})),e.listEntries=t.results,s.isLoading=!1,function(){if(s.breadcrumbs){var e=s.breadcrumbs.slice(0);if(s.currentEntity.url&&_.all(e,(function(e){return e.id!==s.currentEntity.url}))){var t=p(s.currentEntity.url,s.currentEntity.name);e.push(t)}s.breadcrumbs=e}else s.breadcrumbs=[p(s.currentEntity.url,"all")]}()}),(function(e){o.setError("Error "+e.status,s)}))},e.copyUrl=function(e){window.prompt("Copy to clipboard: Ctrl+C, Enter",e.url)},e.downloadUrl=function(e){window.open(e.url,"_blank")},e.delete=function(e){c([e])},e.selectNode=function(e){if("folder"===e.type){var t={id:s.id,breadcrumbs:s.breadcrumbs,currentEntity:e,disableOpenAnimation:!0,controller:s.controller,template:s.template,isClosingDisabled:s.isClosingDisabled};o.showBlade(t,s.parentBlade)}},s.headIcon="fa-folder-o",s.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:s.refresh,canExecuteMethod:function(){return!0}},{name:"platform.commands.new-folder",icon:"fa fa-folder-o",executeMethod:function(){var e,o;e=t.instant("platform.dialogs.create-folder.title"),null!=(o=prompt(e+"\n\nEnter folder name:"))&&r.createFolder({name:o,parentUrl:s.currentEntity.url},s.refresh)},canExecuteMethod:function(){return!0},permission:"platform:asset:create"},{name:"platform.commands.upload",icon:"fa fa-upload",executeMethod:function(){var e={id:"assetUpload",currentEntityId:s.currentEntity.url,title:"platform.blades.asset-upload.title",controller:"platformWebApp.assets.assetUploadController",template:"$(Platform)/Scripts/app/assets/blades/asset-upload.tpl.html"};o.showBlade(e,s)},canExecuteMethod:function(){return!0},permission:"platform:asset:create"},{name:"platform.commands.delete",icon:"fa fa-trash-o",executeMethod:function(){c(e.gridApi.selection.getSelectedRows())},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())},permission:"platform:asset:delete"}],e.setGridOptions=function(t){i.initialize(e,t,(function(t){e.$watch("pageSettings.currentPage",t.pagination.seek)}))},l.initializePagination(e,!0),s.refresh()}])},function(e,t){angular.module("platformWebApp").controller("platformWebApp.assets.assetSelectController",["$scope","platformWebApp.assets.api","platformWebApp.bladeNavigationService","platformWebApp.bladeUtils","platformWebApp.uiGridHelper",function(e,t,r,o,a){var n=e.blade;function l(e,t){return{id:e,name:t,blade:n,navigate:function(e){r.closeBlade(n,(function(){n.disableOpenAnimation=!0,r.showBlade(n,n.parentBlade)}))}}}n.template="$(Platform)/Scripts/app/assets/blades/asset-select.tpl.html",n.headIcon="fa-folder-o",n.currentEntity||(n.currentEntity={}),n.folder&&(n.currentEntity.url="/"+n.folder),n.refresh=function(){n.isLoading=!0,t.search({keyword:n.searchKeyword,folderUrl:n.currentEntity.url},(function(t){e.pageSettings.totalItems=t.totalCount,_.each(t.results,(function(e){e.isImage=e.contentType&&e.contentType.startsWith("image/")})),e.listEntries=t.results,n.isLoading=!1,function(){if(n.breadcrumbs){var e=n.breadcrumbs.slice(0);if(n.currentEntity.url&&_.all(e,(function(e){return e.id!==n.currentEntity.url}))){var t=l(n.currentEntity.url,n.currentEntity.name);e.push(t)}n.breadcrumbs=e}else{var r="all";n.folder&&(r=n.folder),n.breadcrumbs=[l(n.currentEntity.url,r)]}}()}),(function(e){r.setError("Error "+e.status,n)}))},e.selectNode=function(e){if("folder"===e.type){var t={id:n.id,title:n.title,breadcrumbs:n.breadcrumbs,currentEntity:e,disableOpenAnimation:!0,controller:n.controller,template:n.template,isClosingDisabled:n.isClosingDisabled,onSelect:n.onSelect};r.showBlade(t,n.parentBlade)}},n.toolbarCommands=[{name:"platform.commands.confirm",icon:"fa fa-check",executeMethod:function(){e.saveChanges()},canExecuteMethod:function(){return e.gridApi&&_.any(e.gridApi.selection.getSelectedRows())}}],e.saveChanges=function(){n.onSelect&&n.onSelect(e.gridApi.selection.getSelectedRows()),e.bladeClose()},e.setGridOptions=function(t){a.initialize(e,t,(function(t){e.$watch("pageSettings.currentPage",t.pagination.seek)}))},o.initializePagination(e,!0),n.refresh()}])},function(e,t){angular.module("platformWebApp").controller("platformWebApp.assets.assetUploadController",["$scope","platformWebApp.assets.api","platformWebApp.bladeNavigationService","FileUploader","platformWebApp.dialogService",function(e,t,r,o,a){var n,l=e.blade;l.fileUploadOptions||(l.fileUploadOptions={});var i=l.currentEntityId||"";function s(){l.parentBlade.refresh&&!l.fileUploadOptions.suppressParentRefresh&&l.parentBlade.refresh()}function p(e){if(_.any(n,(function(t){return"blob"===t.type&&t.name.toLowerCase()===e.file.name.toLowerCase()}))){var t=prompt('File "'+e.file.name+'" already exists!\n- Change name / press [OK] to overwrite.\n- Press [Cancel] to skip this file.\nFile name:',e.file.name);null==t?e.remove():t?t!==e.file.name?(e.file.name=t,p(e)):e.url+="&forceFileOverwrite=true":p(e)}}e.addImageFromUrl=function(){l.newExternalImageUrl&&(l.uploadCompleted=!1,i?t.uploadFromUrl({folderUrl:i,url:l.newExternalImageUrl},(function(e){s(),l.onUploadComplete&&l.onUploadComplete(e),l.newExternalImageUrl=void 0,l.uploadCompleted=!0})):a.showNotificationDialog({id:"error",title:"platform.dialogs.asset-upload-error.title",message:"platform.dialogs.asset-upload-error.message"}))},l.headIcon="fa-file-o",function(){if(!e.uploader){var c=e.uploader=new o({scope:e,url:"api/platform/assets?folderUrl="+i,method:"POST",removeAfterUpload:!0});l.fileUploadOptions.filterCallback&&angular.isFunction(l.fileUploadOptions.filterCallback)?c.filters.push({name:"customFileFilter",fn:l.fileUploadOptions.filterCallback}):l.fileUploadOptions.accept&&l.fileUploadOptions.accept.contains("image")&&c.filters.push({name:"imageFilter",fn:function(e){var t="|"+e.type.slice(e.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|svg+xml|".indexOf(t)}}),c.onAfterAddingAll=function(e){i?(l.isLoading=!0,l.uploadCompleted=!1,r.setError(null,l),t.search({folderUrl:i},(function(t){l.isLoading=!1,n=t.results,_.each(e,p),c.uploadAll()}),(function(e){r.setError("Error "+e.status,l)}))):a.showNotificationDialog({id:"error",title:"platform.dialogs.asset-upload-error.title",message:"platform.dialogs.asset-upload-error.message"})},c.onErrorItem=function(e,t,o,a){r.setError(e._file.name+" failed: "+(t.message?t.message:o),l)},c.onCompleteAll=function(){s(),l.uploadCompleted=!0},c.onSuccessItem=function(e,t){l.onUploadComplete&&l.onUploadComplete(t)}}}(),l.isLoading=!1}])},function(e,t){angular.module("platformWebApp").factory("platformWebApp.assets.api",["$resource",function(e){return e("api/platform/assets",{},{search:{method:"GET",url:"api/platform/assets",isArray:!1},createFolder:{method:"POST",url:"api/platform/assets/folder"},move:{method:"POST",url:"api/platform/assets/move"},uploadFromUrl:{method:"POST",params:{url:"@url",folderUrl:"@folderUrl",name:"@name"},isArray:!0}})}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,